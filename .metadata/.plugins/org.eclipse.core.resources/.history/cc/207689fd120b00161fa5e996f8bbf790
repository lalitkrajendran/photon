/*
 * parallel_ray_tracing.h
 *
 *  Created on: Apr 20, 2016
 *      Author: lrajendr
 */

#ifndef PARALLEL_RAY_TRACING_H_
#define PARALLEL_RAY_TRACING_H_

// this structure holds scattering data information
typedef struct scattering_data_t
{
	// rotation matrix
	float inverse_rotation_matrix[3][3];
	// direction of propagation of the laser beam
	float beam_propogation_vector[3];
	// scattering angle at which Mie scattering info is available
	float* scattering_angle;
	// scattering irradiance values for each scattering angle
	float* scattering_irradiance;
	// number of angles between 0 and 180 degrees for which Mie scattering
	// info is available
	int num_angles;
	// number of particle diameters over which scattering data is available
	int num_diameters;

}scattering_data_t;

// this structure holds information about the light field generated by the source
typedef struct lightfield_source_t
{
	int lightray_number_per_particle;
	int lightray_process_number;
	int* diameter_index;
	double* radiance;
	float* x;
	float* y;
	float* z;
	int num_rays;
}lightfield_source_t;

typedef struct lightfield_data_t
{
	float* x;
	float* y;
	float* z;
	double* radiance;
	float* theta;
	float* phi;
}lightfield_data_t;

__global__ void generate_lightfield_angular_data(float ,float,scattering_data_t* ,
		int , lightfield_source_t* , int , int , int );

extern "C"{

lightfield* start_ray_tracing(float , float ,scattering_data_t* , char* ,lightfield_source_t* ,
		int ,int , int );

}



#endif /* PARALLEL_RAY_TRACING_H_ */
