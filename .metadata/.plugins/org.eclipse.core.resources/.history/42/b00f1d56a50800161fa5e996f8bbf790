printf("lens_pitch: %f, image_distance: %f\n",lens_pitch,image_distance);

	printf("scattering_data\n");
	printf("beam_propogation_vector: %f, %f, %f\n", scattering_data.beam_propogation_vector[0],
			scattering_data.beam_propogation_vector[1],scattering_data.beam_propogation_vector[2]);
	printf("inverse_rotation_matrix: [");
	for(i = 0; i < 3; i++)
	{
		for(j = 0; j < 3; j++)
			printf("%f, ",scattering_data.inverse_rotation_matrix[i][j]);
		printf(";");
	}
	printf("\n");
	printf("num_angles: %d\n",scattering_data.num_angles);
	printf("scattering_angles: 1:3 - %f,%f,%f\n",scattering_data.scattering_angle[0],scattering_data.scattering_angle[1],
			scattering_data.scattering_angle[2]);
	printf("scattering_angles: last three - %f,%f,%f\n",scattering_data.scattering_angle[scattering_data.num_angles-3],
				scattering_data.scattering_angle[scattering_data.num_angles-2],
				scattering_data.scattering_angle[scattering_data.num_angles-1]);

	printf("scattering_irradiance: 1:3 - %f,%f,%f\n",scattering_data.scattering_irradiance[0],scattering_data.scattering_irradiance[1],
				scattering_data.scattering_irradiance[2]);
	printf("scattering_irradiance: last three - %f,%f,%f\n",scattering_data.scattering_irradiance[scattering_data.num_angles-3],
					scattering_data.scattering_irradiance[scattering_data.num_angles-2],
					scattering_data.scattering_irradiance[scattering_data.num_angles-1]);


	printf("scattering_type: %s\n", scattering_type);