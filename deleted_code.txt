	// display contents of all data structures to ensure that you are able to access
	// them

//	printf("lens_pitch: %f, image_distance: %f\n",lens_pitch,image_distance);

//	printf("scattering_data\n");
	printf("scattering_data_p: %ld\n", scattering_data_p);

	printf("scattering_data_p->beam_propogation_vector: %ld\n", scattering_data_p->beam_propogation_vector);

	printf("beam_propogation_vector: %f, %f, %f\n", scattering_data.beam_propogation_vector[0],
			scattering_data.beam_propogation_vector[1],scattering_data.beam_propogation_vector[2]);

	printf("scattering_data_p->inverse_rotation_matrix :%ld\n",scattering_data_p->inverse_rotation_matrix);
	printf("scattering_data_p->inverse_rotation_matrix (rows) :%ld, %ld, %ld\n",
			scattering_data_p->inverse_rotation_matrix[0],scattering_data_p->inverse_rotation_matrix[1],
			scattering_data_p->inverse_rotation_matrix[2]);

	printf("inverse_rotation_matrix: [");
	for(i = 0; i < 3; i++)
	{
		for(j = 0; j < 3; j++)
			printf("%f, ",scattering_data_p->inverse_rotation_matrix[i][j]);
		printf(";");
	}
	printf("\n");
	printf("inverse_rotation_matrix[1][1] located at: %d\n", (scattering_data.inverse_rotation_matrix[1] + sizeof(float)));

	printf("inverse_rotation_matrix[1][1]: %f\n", *(scattering_data.inverse_rotation_matrix[1] + sizeof(float)));

	printf("num_angles: %d\n",scattering_data.num_angles);
	printf("scattering_angles: 1:3 - %f,%f,%f\n",scattering_data.scattering_angle[0],scattering_data.scattering_angle[1],
			scattering_data.scattering_angle[2]);
	printf("scattering_angles: last three - %f,%f,%f\n",scattering_data.scattering_angle[scattering_data.num_angles-3],
				scattering_data.scattering_angle[scattering_data.num_angles-2],
				scattering_data.scattering_angle[scattering_data.num_angles-1]);

	printf("scattering_irradiance: 1st row, 1st three elements - %f,%f,%f\n",scattering_data.scattering_irradiance[0][0],scattering_data.scattering_irradiance[0][1],
				scattering_data.scattering_irradiance[0][2]);
	printf("scattering_irradiance: last row, last three elements - %f,%f,%f\n",scattering_data.scattering_irradiance[scattering_data.num_angles-1][scattering_data.num_diameters-3],
					scattering_data.scattering_irradiance[scattering_data.num_angles-1][scattering_data.num_diameters-2],
					scattering_data.scattering_irradiance[scattering_data.num_angles-1][scattering_data.num_diameters-1]);


	printf("scattering_type: %s\n", scattering_type);
	int N = lightfield_source.num_rays;

	printf("lightfield_source: \n");
	printf("num_rays: %d\n", lightfield_source.num_rays);
	printf("lightray_number_per_particle: %d\n", lightfield_source.lightray_number_per_particle);
	printf("lightray_process_number: %d\n",lightfield_source.lightray_process_number);
	printf("diameter (1st three): %d,%d,%d\n",lightfield_source_p->diameter_index[0],lightfield_source.diameter_index[1],lightfield_source.diameter_index[2]);
	printf("diameter (last three): %d,%d,%d\n",lightfield_source.diameter_index[N-3],lightfield_source.diameter_index[N-2],lightfield_source.diameter_index[N-1]);
	printf("radiance (1st three): %f,%f,%f\n",lightfield_source_p->radiance[0],lightfield_source.radiance[1],lightfield_source.radiance[2]);
	printf("radiance (last three): %f,%f,%f\n",lightfield_source.radiance[N-3],lightfield_source.radiance[N-2],lightfield_source.radiance[N-1]);
	printf("x (1st three): %f,%f,%f\n",lightfield_source_p->x[0],lightfield_source.x[1],lightfield_source.x[2]);
	printf("x (last three): %f,%f,%f\n",lightfield_source.x[N-3],lightfield_source.x[N-2],lightfield_source.x[N-1]);
	printf("y (1st three): %f,%f,%f\n",lightfield_source_p->y[0],lightfield_source.y[1],lightfield_source.y[2]);
	printf("y (last three): %f,%f,%f\n",lightfield_source.y[N-3],lightfield_source.y[N-2],lightfield_source.y[N-1]);
	printf("z (1st three): %f,%f,%f\n",lightfield_source_p->z[0],lightfield_source.z[1],lightfield_source.z[2]);
	printf("z (last three): %f,%f,%f\n",lightfield_source.z[N-3],lightfield_source.z[N-2],lightfield_source.z[N-1]);

	printf("n_min: %d, n_max: %d\n",n_min,n_max);
	
	
	// display first and last few elements of lightfield_data
	N = light_ray_data.num_lightrays;
	
	//	printf("lightfield_data contents\n");
//	printf("ray_source_coordinates (1st): %f, %f, %f\n",light_ray_data.ray_source_coordinates[0].x,light_ray_data.ray_source_coordinates[0].y,light_ray_data.ray_source_coordinates[0].z);
//	printf("ray_source_coordinates (last): %f, %f, %f\n",light_ray_data.ray_source_coordinates[N-1].x,light_ray_data.ray_source_coordinates[N-1].y,light_ray_data.ray_source_coordinates[N-1].z);
//	printf("ray_propagation_direction (1st): %f, %f, %f\n",light_ray_data.ray_propagation_direction[0].x,light_ray_data.ray_propagation_direction[0].y,light_ray_data.ray_propagation_direction[0].z);
//	printf("ray_propagation_direction (last): %f, %f, %f\n",light_ray_data.ray_propagation_direction[N-1].x,light_ray_data.ray_propagation_direction[N-1].y,light_ray_data.ray_propagation_direction[N-1].z);
//	printf("ray_wavelength (1st, last): %f, %f\n",light_ray_data.ray_wavelength[0],light_ray_data.ray_wavelength[N-1]);
//	printf("ray_radiance (1st, last): %f, %f\n",light_ray_data.ray_radiance[0],light_ray_data.ray_radiance[N-1]);

	
	
	
	
	/*
		optical system
	*/
	
	// check if elements have been received correctly
	
	
	
		int k,l;
	// number of elements
	printf("num_elements: %d\n",num_elements);

	// element_center
	printf("element_center: \n");
	for(k = 0; k < num_elements; k++)
	{
		for(l = 0; l < 3; l++)
		{
			printf("%f ",element_center[k][l]);
		}
		printf("\n");
	}

	// element_data
	printf("element_data\n");
	for(k = 0; k < num_elements; k++){
		printf("element_number: %d\n", k+1);
		// axial offset distance
		printf("axial_offset_distances: %f, %f\n", element_data_p[k].axial_offset_distances[0],element_data_p[k].axial_offset_distances[1]);

		// element_geometry
		printf("element_geometry:\n");
		printf("front_surface_radius: %f\n", element_data_p[k].element_geometry.front_surface_radius);
//		file_optical_elements.write((char*)&element_data_p[k].element_geometry.front_surface_shape,strlen(element_data_p->element_geometry.front_surface_shape)*sizeof(char));
		printf("front_surface_shape: %s\n", element_data_p[k].element_geometry.front_surface_shape);
		printf("front_surface_spherical: %s\n",element_data_p[k].element_geometry.front_surface_spherical ? "true":"false");
		printf("back_surface_radius: %f\n", element_data_p[k].element_geometry.back_surface_radius);
//		file_optical_elements.write((char*)&element_data_p[k].element_geometry.back_surface_shape,strlen(element_data_p->element_geometry.back_surface_shape)*sizeof(char));
		printf("back_surface_shape: %s\n", element_data_p[k].element_geometry.back_surface_shape);
		printf("back_surface_spherical: %s\n",element_data_p[k].element_geometry.back_surface_spherical ? "true":"false");
		printf("pitch: %f\n",element_data_p[k].element_geometry.pitch);
		printf("vertex_distance: %f\n",element_data_p[k].element_geometry.vertex_distance);

		// element_number
		printf("element_number: %f\n",element_data_p[k].element_number);

		// element_properties
		printf("element_properties:\n");
		printf("abbe_number: %f\n",element_data_p[k].element_properties.abbe_number);
		printf("absorbance_rage: %f\n",element_data_p[k].element_properties.absorbance_rate);
		printf("refractive_index: %f\n", element_data_p[k].element_properties.refractive_index);
		printf("thin_lens_focal_length: %f\n",element_data_p[k].element_properties.thin_lens_focal_length);
		printf("transmission_ratio : %f\n",element_data_p[k].element_properties.transmission_ratio);

		// element_type
//		file_optical_elements.write((char*)&element_data_p[k].element_type,strlen(element_data_p->element_type)*sizeof(char));
		printf("element_type: %s\n",element_data_p[k].element_type);

		// elements_coplanar
		printf("element_coplanar: %f\n",element_data_p[k].elements_coplanar);

		// rotation_angles
		printf("rotation_angles: ");
		for(l = 0; l < 3; l++)
		{
			printf("%f ",element_data_p[k].rotation_angles[l]);
		}
		printf("\n");

		// z_inter_element_distance
		printf("z_inter_element_distance: %f\n",element_data_p[k].z_inter_element_distance);

	}

	// element plane parameters
	printf("element_plane_parameters: \n");
	for(k = 0; k < num_elements; k++)
	{
		for(l = 0; l < 4; l++)
		{
			printf("%f ", element_plane_parameters[k][l]);
		}

		printf("\n");
	}

	// element system index
	printf("element_system_index:\n");
	for(k = 0; k < num_elements; k++)
	{
		printf("%d ",element_system_index[k]);
	}

	
	
	//	// setup texture array to hold scattering irradiance data
//	cudaMalloc((void**)&data_array,scattering_data.num_angles*scattering_data.num_diameters*sizeof(float));
//	cudaMemcpy(data_array,scattering_data.scattering_irradiance,
//				scattering_data.num_angles*scattering_data.num_diameters*sizeof(float),cudaMemcpyHostToDevice);
//	cudaChannelFormatDesc desc = cudaCreateChannelDesc<float>();
//	cudaBindTexture2D( NULL, mie_scattering_irradiance,
//	                               data_array,
//	                               desc, scattering_data.num_diameters, scattering_data.num_angles,
//	                               sizeof(float) * scattering_data.num_diameters );

	// check scattering data arrangement
	printf("num_angles: %d\n", scattering_data.num_angles);
	printf("num_diameters: %d\n", scattering_data.num_diameters);

	printf("scattering irradiance values\n");
	printf("0,0: %f\n",scattering_data.scattering_irradiance[0]);
//	printf("1,0: %f\n",scattering_data.scattering_irradiance[1*num_diameters]);
	printf("0,ND: %f\n",scattering_data.scattering_irradiance[1*scattering_data.num_diameters-1]);
	printf("NA,0: %f\n",scattering_data.scattering_irradiance[(scattering_data.num_angles-1)*scattering_data.num_diameters]);


//	// allocate space on GPU
//	optical_element_t* d_optical_element = 0;
//	cudaMalloc((void**)&d_optical_element,sizeof(optical_element_t)*num_elements);
//	cudaMemcpy(d_optical_element,optical_element,sizeof(optical_element_t)*num_elements,cudaMemcpyHostToDevice);

//	// generate random numbers corresponding to radial and angular coordinates on the lens
//	float random_number_1 = random_single(particle_id * local_ray_id * global_ray_id);
//	float random_number_2 = random_single(particle_id + local_ray_id + global_ray_id);
//	unsigned int seed1 = 1105;
//	unsigned int seed2 = 4092;
//	float random_number_1 = random_single(seed1,local_ray_id); //global_ray_id);
//	float random_number_2 = random_single(seed2,local_ray_id); //global_ray_id);

//__device__ light_ray_data_t propagate_rays_through_optical_system(optical_element_t optical_element[],int num_elements, int num_rays, int lightray_number_per_particle, light_ray_data_t light_ray_data)
//{
//	// % This function propagates the light ray data defined by the structure
//	// % 'light_ray_data' through the optical system defined by the input
//	// % arguments.
//
//	int k;
//	// % This is the number of sequential optical elements within the total
//	// % optical system that the light rays must be iteratively passed through
//	int sequential_element_number = 0;
//	for(k = 0; k < num_elements; k++)
//	{
//		if(sequential_element_number<=optical_element[k].element_system_index)
//			sequential_element_number = optical_element[k].element_system_index;
//	}
//
//	// % Since the the optical is defined from the sensor moving outward (i.e. the
//	// % opposite direction in which the light will enter a camera system), this
//	// % reverses the indexing of the optical elements so that the first element
//	// % index corresponds to the first optical element that the light will hit
//
//	// % This iterates through the sequential optical elements propagating the
//	// % light rays through each successive element (or system of coplanar
//	// % elements)
//	int element_index;
////	int* current_element_indices = (int *) malloc(num_elements*sizeof(int));
//	int current_element_indices[10];
//	//	printf("sequential_element_number:%d\n",sequential_element_number);
//	for(element_index = 0; element_index < sequential_element_number; element_index++)
//	{
//		// These are the indices of the current element or elements to propagate
//		// the light rays through
////		current_element_indices = np.squeeze(np.argwhere(element_system_index == element_index))
//
//		int element_ctr = 0;
//		for(k = 0; k < num_elements; k++)
//		{
////			if(element_system_index_local[k]==element_index)
//			if(sequential_element_number - optical_element[k].element_system_index==element_index)
//			{
//				current_element_indices[k] = k;
//				element_ctr++;
//			}
//		}
//
//		// % This is the number of elements that the light rays need to be
//		// % simultaneously propagated through
//		int simultaneous_element_number = element_ctr;
////		printf("simultaneous_element_number: %d\n",simultaneous_element_number);
//
//
//		// % If there is only a single element that the rays are to be propagated
//		// % through, this propagates the rays through the single element;
//		// % otherwise the light rays are simultaneously propagated through the
//		// % multiple elements
//
//		if(simultaneous_element_number == 1)
//		{
//
////			// % This extracts the current optical element data
////			element_data_t current_optical_element_single = element_data[current_element_indices[0]];
////			// % This extracts the current optical element plane parameters
////			float4 current_plane_parameters_single = element_plane_parameters[current_element_indices[0]];
////			// % This extracts the current center of the optical element
////			float3 current_element_center_single = element_center[current_element_indices[0]];
//
//			light_ray_data = propagate_rays_through_single_element(optical_element[current_element_indices[0]].element_data, optical_element[current_element_indices[0]].element_center,
//					optical_element[current_element_indices[0]].element_plane_parameters,light_ray_data);
//
//		}
////		else
////		{
////
////			element_data_t* current_optical_element = (element_data_t *) malloc(simultaneous_element_number*sizeof(element_data_t));
////			float4* current_plane_parameters = (float4 *) malloc(simultaneous_element_number*sizeof(float4));
////			float3* current_element_center = (float3 *) malloc(simultaneous_element_number*sizeof(float3));
////
////			//# % This initializes a cell array to contain the optical element data
//////			element_data_t current_optical_element[simultaneous_element_number];
////			//# % This iterates through the individual optical elements extracting
////			//# % the optical element data
////			int simultaneous_element_index;
////			for(simultaneous_element_index = 0; simultaneous_element_index <= simultaneous_element_number;simultaneous_element_index++)
////			{
////				// % This extracts the current optical element data
////				current_optical_element[simultaneous_element_index] = element_data[
////					current_element_indices[simultaneous_element_index]];
////				//# % This extracts the current optical element plane parameters
////				current_plane_parameters[simultaneous_element_index] = element_plane_parameters[current_element_indices[simultaneous_element_index]];
////				//# % This extracts the current center of the optical element
////				current_element_center[simultaneous_element_index] = element_center[current_element_indices[simultaneous_element_index]];
////
////			}
////
////			//# % This propagates the light rays through the multiple optical
////			//# % elements
////			light_ray_data = propagate_rays_through_multiple_elements(current_optical_element, current_element_center,
////																	current_plane_parameters, simultaneous_element_number,light_ray_data);
////
////			// free allocated memory
////			free(current_optical_element);
////			free(current_plane_parameters);
////			free(current_element_center);
////
////		}
//
//	}
//
//	// free allocated memory
////	free(current_element_indices);
////	free(element_system_index_local);
//
//	return light_ray_data;
//
//
//}


//__device__ double atomicAdd(double* address, double val)
//{
//    unsigned long long int* address_as_ull =
//                                          (unsigned long long int*)address;
//    unsigned long long int old = *address_as_ull, assumed;
//    do {
//        assumed = old;
//        old = atomicCAS(address_as_ull, assumed,
//                        __double_as_longlong(val +
//                        __longlong_as_double(assumed)));
//    } while (assumed != old);
//    return __longlong_as_double(old);
//}

//	//# % This is the pixel pitch [micron]
//	float pixel_pitch = camera_design.pixel_pitch;
//	//# % This is the number of pixels in the x-direction
//	int x_pixel_number = camera_design.x_pixel_number;
//	//# % This is the number of pixels in the y-direction
//	int y_pixel_number = camera_design.y_pixel_number;
//
//	//# % This is the coordinate of pixel (1,1) [0][0]
//	float pixel_1_x = -pixel_pitch * (x_pixel_number - 1) / 2.0;
//	float pixel_1_y = -pixel_pitch * (y_pixel_number - 1) / 2.0;
//
//	//# % This is the number of pixel diameters the point (x,y) is from the center
//	//# % of the (0,0) pixel
//	float x = ray_source_coordinates.x;
//	float y = ray_source_coordinates.y;
//	float d_x = (x - pixel_1_x) / pixel_pitch + 1.5;
//	float d_y = (y - pixel_1_y) / pixel_pitch + 1.5;

//		for(int i = 0; i < num_elements; i++)
//		{
//			optical_element_shared[i].element_data = optical_element[i].element_data;
//			optical_element_shared[i].element_center = optical_element[i].element_center;
//			optical_element_shared[i].element_plane_parameters = optical_element[i].element_plane_parameters;
//			optical_element_shared[i].element_system_index = optical_element[i].element_system_index;
//		}

	// declare element to store optical system information
//	extern __shared__ optical_element_t optical_element_shared[];

//	ray_pos_final[global_ray_id].x = light_ray_data.ray_source_coordinates.x;
//	ray_pos_final[global_ray_id].y = light_ray_data.ray_source_coordinates.y;

__global__ void convertinttodouble(int2* i_num, double* d_num)
{
    int local_threadId = threadIdx.x + threadIdx.y*blockDim.x;
    int blockId = blockIdx.x + blockIdx.y*gridDim.x;
    int pixel_id = blockId*blockDim.x*blockDim.y + local_threadId;

	int2 v = i_num[pixel_id];

    d_num[pixel_id] = __hiloint2double(v.y,v.x);

}

	std::cout<<"5 + 6 = "<<add(5,6)<<std::endl;


	float* d_array;
	cudaMalloc((void **)&d_array, 5*sizeof(float));
	cudaFree(d_array);

//	// set image array intensity to zero
//	cudaMemset(d_image_array,0.0,sizeof(float)*num_pixels);


typedef struct optical_element_t
{
	element_data_t element_data;
	float3 element_center;
	float4 element_plane_parameters;
	int element_system_index;
}optical_element_t;

	// store element data as an array of structures
	optical_element_t* optical_element = (optical_element_t*) malloc(sizeof(optical_element_t)*num_elements);

	for(k = 0; k < num_elements; k++)
	{
		optical_element[k].element_data = element_data_p[k];
		optical_element[k].element_center = element_center_2[k];
		optical_element[k].element_plane_parameters = element_plane_parameters_2[k];
		optical_element[k].element_system_index = element_system_index[k];
	}

//			float4& datap = _params.data[size_t(z*data_width*data_height + y*data_width + x)];
//			datap.x = -normal.x;
//			datap.y = -normal.y;
//			datap.z = -normal.z;
//			datap.w = data[size_t(z*data_width*data_height + y*data_width + x)];

float m = fmax(float(data_width), float(data_height));
	m = fmax(m, float(data_depth));
	float3 dataScale = make_float3(float(data_width)/m, float(data_height)/m, float(data_depth)/m);

	