	// display contents of all data structures to ensure that you are able to access
	// them

//	printf("lens_pitch: %f, image_distance: %f\n",lens_pitch,image_distance);

//	printf("scattering_data\n");
	printf("scattering_data_p: %ld\n", scattering_data_p);

	printf("scattering_data_p->beam_propogation_vector: %ld\n", scattering_data_p->beam_propogation_vector);

	printf("beam_propogation_vector: %f, %f, %f\n", scattering_data.beam_propogation_vector[0],
			scattering_data.beam_propogation_vector[1],scattering_data.beam_propogation_vector[2]);

	printf("scattering_data_p->inverse_rotation_matrix :%ld\n",scattering_data_p->inverse_rotation_matrix);
	printf("scattering_data_p->inverse_rotation_matrix (rows) :%ld, %ld, %ld\n",
			scattering_data_p->inverse_rotation_matrix[0],scattering_data_p->inverse_rotation_matrix[1],
			scattering_data_p->inverse_rotation_matrix[2]);

	printf("inverse_rotation_matrix: [");
	for(i = 0; i < 3; i++)
	{
		for(j = 0; j < 3; j++)
			printf("%f, ",scattering_data_p->inverse_rotation_matrix[i][j]);
		printf(";");
	}
	printf("\n");
	printf("inverse_rotation_matrix[1][1] located at: %d\n", (scattering_data.inverse_rotation_matrix[1] + sizeof(float)));

	printf("inverse_rotation_matrix[1][1]: %f\n", *(scattering_data.inverse_rotation_matrix[1] + sizeof(float)));

	printf("num_angles: %d\n",scattering_data.num_angles);
	printf("scattering_angles: 1:3 - %f,%f,%f\n",scattering_data.scattering_angle[0],scattering_data.scattering_angle[1],
			scattering_data.scattering_angle[2]);
	printf("scattering_angles: last three - %f,%f,%f\n",scattering_data.scattering_angle[scattering_data.num_angles-3],
				scattering_data.scattering_angle[scattering_data.num_angles-2],
				scattering_data.scattering_angle[scattering_data.num_angles-1]);

	printf("scattering_irradiance: 1st row, 1st three elements - %f,%f,%f\n",scattering_data.scattering_irradiance[0][0],scattering_data.scattering_irradiance[0][1],
				scattering_data.scattering_irradiance[0][2]);
	printf("scattering_irradiance: last row, last three elements - %f,%f,%f\n",scattering_data.scattering_irradiance[scattering_data.num_angles-1][scattering_data.num_diameters-3],
					scattering_data.scattering_irradiance[scattering_data.num_angles-1][scattering_data.num_diameters-2],
					scattering_data.scattering_irradiance[scattering_data.num_angles-1][scattering_data.num_diameters-1]);


	printf("scattering_type: %s\n", scattering_type);
	int N = lightfield_source.num_rays;

	printf("lightfield_source: \n");
	printf("num_rays: %d\n", lightfield_source.num_rays);
	printf("lightray_number_per_particle: %d\n", lightfield_source.lightray_number_per_particle);
	printf("lightray_process_number: %d\n",lightfield_source.lightray_process_number);
	printf("diameter (1st three): %d,%d,%d\n",lightfield_source_p->diameter_index[0],lightfield_source.diameter_index[1],lightfield_source.diameter_index[2]);
	printf("diameter (last three): %d,%d,%d\n",lightfield_source.diameter_index[N-3],lightfield_source.diameter_index[N-2],lightfield_source.diameter_index[N-1]);
	printf("radiance (1st three): %f,%f,%f\n",lightfield_source_p->radiance[0],lightfield_source.radiance[1],lightfield_source.radiance[2]);
	printf("radiance (last three): %f,%f,%f\n",lightfield_source.radiance[N-3],lightfield_source.radiance[N-2],lightfield_source.radiance[N-1]);
	printf("x (1st three): %f,%f,%f\n",lightfield_source_p->x[0],lightfield_source.x[1],lightfield_source.x[2]);
	printf("x (last three): %f,%f,%f\n",lightfield_source.x[N-3],lightfield_source.x[N-2],lightfield_source.x[N-1]);
	printf("y (1st three): %f,%f,%f\n",lightfield_source_p->y[0],lightfield_source.y[1],lightfield_source.y[2]);
	printf("y (last three): %f,%f,%f\n",lightfield_source.y[N-3],lightfield_source.y[N-2],lightfield_source.y[N-1]);
	printf("z (1st three): %f,%f,%f\n",lightfield_source_p->z[0],lightfield_source.z[1],lightfield_source.z[2]);
	printf("z (last three): %f,%f,%f\n",lightfield_source.z[N-3],lightfield_source.z[N-2],lightfield_source.z[N-1]);

	printf("n_min: %d, n_max: %d\n",n_min,n_max);