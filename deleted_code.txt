	// display contents of all data structures to ensure that you are able to access
	// them

//	printf("lens_pitch: %f, image_distance: %f\n",lens_pitch,image_distance);

//	printf("scattering_data\n");
	printf("scattering_data_p: %ld\n", scattering_data_p);

	printf("scattering_data_p->beam_propogation_vector: %ld\n", scattering_data_p->beam_propogation_vector);

	printf("beam_propogation_vector: %f, %f, %f\n", scattering_data.beam_propogation_vector[0],
			scattering_data.beam_propogation_vector[1],scattering_data.beam_propogation_vector[2]);

	printf("scattering_data_p->inverse_rotation_matrix :%ld\n",scattering_data_p->inverse_rotation_matrix);
	printf("scattering_data_p->inverse_rotation_matrix (rows) :%ld, %ld, %ld\n",
			scattering_data_p->inverse_rotation_matrix[0],scattering_data_p->inverse_rotation_matrix[1],
			scattering_data_p->inverse_rotation_matrix[2]);

	printf("inverse_rotation_matrix: [");
	for(i = 0; i < 3; i++)
	{
		for(j = 0; j < 3; j++)
			printf("%f, ",scattering_data_p->inverse_rotation_matrix[i][j]);
		printf(";");
	}
	printf("\n");
	printf("inverse_rotation_matrix[1][1] located at: %d\n", (scattering_data.inverse_rotation_matrix[1] + sizeof(float)));

	printf("inverse_rotation_matrix[1][1]: %f\n", *(scattering_data.inverse_rotation_matrix[1] + sizeof(float)));

	printf("num_angles: %d\n",scattering_data.num_angles);
	printf("scattering_angles: 1:3 - %f,%f,%f\n",scattering_data.scattering_angle[0],scattering_data.scattering_angle[1],
			scattering_data.scattering_angle[2]);
	printf("scattering_angles: last three - %f,%f,%f\n",scattering_data.scattering_angle[scattering_data.num_angles-3],
				scattering_data.scattering_angle[scattering_data.num_angles-2],
				scattering_data.scattering_angle[scattering_data.num_angles-1]);

	printf("scattering_irradiance: 1st row, 1st three elements - %f,%f,%f\n",scattering_data.scattering_irradiance[0][0],scattering_data.scattering_irradiance[0][1],
				scattering_data.scattering_irradiance[0][2]);
	printf("scattering_irradiance: last row, last three elements - %f,%f,%f\n",scattering_data.scattering_irradiance[scattering_data.num_angles-1][scattering_data.num_diameters-3],
					scattering_data.scattering_irradiance[scattering_data.num_angles-1][scattering_data.num_diameters-2],
					scattering_data.scattering_irradiance[scattering_data.num_angles-1][scattering_data.num_diameters-1]);


	printf("scattering_type: %s\n", scattering_type);
	int N = lightfield_source.num_rays;

	printf("lightfield_source: \n");
	printf("num_rays: %d\n", lightfield_source.num_rays);
	printf("lightray_number_per_particle: %d\n", lightfield_source.lightray_number_per_particle);
	printf("lightray_process_number: %d\n",lightfield_source.lightray_process_number);
	printf("diameter (1st three): %d,%d,%d\n",lightfield_source_p->diameter_index[0],lightfield_source.diameter_index[1],lightfield_source.diameter_index[2]);
	printf("diameter (last three): %d,%d,%d\n",lightfield_source.diameter_index[N-3],lightfield_source.diameter_index[N-2],lightfield_source.diameter_index[N-1]);
	printf("radiance (1st three): %f,%f,%f\n",lightfield_source_p->radiance[0],lightfield_source.radiance[1],lightfield_source.radiance[2]);
	printf("radiance (last three): %f,%f,%f\n",lightfield_source.radiance[N-3],lightfield_source.radiance[N-2],lightfield_source.radiance[N-1]);
	printf("x (1st three): %f,%f,%f\n",lightfield_source_p->x[0],lightfield_source.x[1],lightfield_source.x[2]);
	printf("x (last three): %f,%f,%f\n",lightfield_source.x[N-3],lightfield_source.x[N-2],lightfield_source.x[N-1]);
	printf("y (1st three): %f,%f,%f\n",lightfield_source_p->y[0],lightfield_source.y[1],lightfield_source.y[2]);
	printf("y (last three): %f,%f,%f\n",lightfield_source.y[N-3],lightfield_source.y[N-2],lightfield_source.y[N-1]);
	printf("z (1st three): %f,%f,%f\n",lightfield_source_p->z[0],lightfield_source.z[1],lightfield_source.z[2]);
	printf("z (last three): %f,%f,%f\n",lightfield_source.z[N-3],lightfield_source.z[N-2],lightfield_source.z[N-1]);

	printf("n_min: %d, n_max: %d\n",n_min,n_max);
	
	
	// display first and last few elements of lightfield_data
	N = light_ray_data.num_lightrays;
	
	//	printf("lightfield_data contents\n");
//	printf("ray_source_coordinates (1st): %f, %f, %f\n",light_ray_data.ray_source_coordinates[0].x,light_ray_data.ray_source_coordinates[0].y,light_ray_data.ray_source_coordinates[0].z);
//	printf("ray_source_coordinates (last): %f, %f, %f\n",light_ray_data.ray_source_coordinates[N-1].x,light_ray_data.ray_source_coordinates[N-1].y,light_ray_data.ray_source_coordinates[N-1].z);
//	printf("ray_propagation_direction (1st): %f, %f, %f\n",light_ray_data.ray_propagation_direction[0].x,light_ray_data.ray_propagation_direction[0].y,light_ray_data.ray_propagation_direction[0].z);
//	printf("ray_propagation_direction (last): %f, %f, %f\n",light_ray_data.ray_propagation_direction[N-1].x,light_ray_data.ray_propagation_direction[N-1].y,light_ray_data.ray_propagation_direction[N-1].z);
//	printf("ray_wavelength (1st, last): %f, %f\n",light_ray_data.ray_wavelength[0],light_ray_data.ray_wavelength[N-1]);
//	printf("ray_radiance (1st, last): %f, %f\n",light_ray_data.ray_radiance[0],light_ray_data.ray_radiance[N-1]);

	
	
	
	
	/*
		optical system
	*/
	
	// check if elements have been received correctly
	
	
	
		int k,l;
	// number of elements
	printf("num_elements: %d\n",num_elements);

	// element_center
	printf("element_center: \n");
	for(k = 0; k < num_elements; k++)
	{
		for(l = 0; l < 3; l++)
		{
			printf("%f ",element_center[k][l]);
		}
		printf("\n");
	}

	// element_data
	printf("element_data\n");
	for(k = 0; k < num_elements; k++){
		printf("element_number: %d\n", k+1);
		// axial offset distance
		printf("axial_offset_distances: %f, %f\n", element_data_p[k].axial_offset_distances[0],element_data_p[k].axial_offset_distances[1]);

		// element_geometry
		printf("element_geometry:\n");
		printf("front_surface_radius: %f\n", element_data_p[k].element_geometry.front_surface_radius);
//		file_optical_elements.write((char*)&element_data_p[k].element_geometry.front_surface_shape,strlen(element_data_p->element_geometry.front_surface_shape)*sizeof(char));
		printf("front_surface_shape: %s\n", element_data_p[k].element_geometry.front_surface_shape);
		printf("front_surface_spherical: %s\n",element_data_p[k].element_geometry.front_surface_spherical ? "true":"false");
		printf("back_surface_radius: %f\n", element_data_p[k].element_geometry.back_surface_radius);
//		file_optical_elements.write((char*)&element_data_p[k].element_geometry.back_surface_shape,strlen(element_data_p->element_geometry.back_surface_shape)*sizeof(char));
		printf("back_surface_shape: %s\n", element_data_p[k].element_geometry.back_surface_shape);
		printf("back_surface_spherical: %s\n",element_data_p[k].element_geometry.back_surface_spherical ? "true":"false");
		printf("pitch: %f\n",element_data_p[k].element_geometry.pitch);
		printf("vertex_distance: %f\n",element_data_p[k].element_geometry.vertex_distance);

		// element_number
		printf("element_number: %f\n",element_data_p[k].element_number);

		// element_properties
		printf("element_properties:\n");
		printf("abbe_number: %f\n",element_data_p[k].element_properties.abbe_number);
		printf("absorbance_rage: %f\n",element_data_p[k].element_properties.absorbance_rate);
		printf("refractive_index: %f\n", element_data_p[k].element_properties.refractive_index);
		printf("thin_lens_focal_length: %f\n",element_data_p[k].element_properties.thin_lens_focal_length);
		printf("transmission_ratio : %f\n",element_data_p[k].element_properties.transmission_ratio);

		// element_type
//		file_optical_elements.write((char*)&element_data_p[k].element_type,strlen(element_data_p->element_type)*sizeof(char));
		printf("element_type: %s\n",element_data_p[k].element_type);

		// elements_coplanar
		printf("element_coplanar: %f\n",element_data_p[k].elements_coplanar);

		// rotation_angles
		printf("rotation_angles: ");
		for(l = 0; l < 3; l++)
		{
			printf("%f ",element_data_p[k].rotation_angles[l]);
		}
		printf("\n");

		// z_inter_element_distance
		printf("z_inter_element_distance: %f\n",element_data_p[k].z_inter_element_distance);

	}

	// element plane parameters
	printf("element_plane_parameters: \n");
	for(k = 0; k < num_elements; k++)
	{
		for(l = 0; l < 4; l++)
		{
			printf("%f ", element_plane_parameters[k][l]);
		}

		printf("\n");
	}

	// element system index
	printf("element_system_index:\n");
	for(k = 0; k < num_elements; k++)
	{
		printf("%d ",element_system_index[k]);
	}

	